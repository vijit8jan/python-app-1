pipeline {
    agent any

    environment {
        // Define any environment variables needed for the pipeline
        SONARQUBE_SCANNER_HOME = tool 'SonarQubeScanner' // Assuming you have a SonarQube scanner tool configured in Jenkins
        AWS_CREDENTIALS = credentials('aws-credentials-id') // Replace with your AWS credentials ID
        DOCKER_REGISTRY = "your-aws-account-id.dkr.ecr.your-region.amazonaws.com"
        IMAGE_NAME = "hello-world"
        IMAGE_TAG = "latest"
    }

    stages {
        stage('Prepare Workspace') {
            steps {
                script {
                    sh 'mkdir -p /opt/jenkins/workspace'
                }
            }
        }

        stage('Checkout') {
            steps {
                dir('/opt/jenkins/workspace') {
                    checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'https://github.com/vijit8jan/python-app-1.git']]])
                }
            }
        }
        

        stage('Unit testing') {
            steps {
                dir('/opt/jenkins/workspace') {
                    script {
                        sh 'pytest --junitxml=reports/results.xml'
                    }
                }
            }
            post {
                always {
                    junit '/opt/jenkins/workspace/reports/results.xml'
                }
            }
        }
        
        stage('Code coverage') {
            steps {
                dir('/opt/jenkins/workspace') {
                    script {
                        sh 'python3-coverage run -m pytest'
                        sh 'python3-coverage report -m'
                        sh 'python3-coverage xml -o coverage-reports/coverage.xml'
                    }
                }
            }
            post {
                always {
                    publishCoverage adapters: [coberturaAdapter('/opt/jenkins/workspace/coverage-reports/coverage.xml')]
                }
            }
        }
        
        stage('Static code analysis using SonarQube') {
            steps {
                dir('/opt/jenkins/workspace') {
                    script {
                        
                    }
                }
            }
        }
        
        stage('Check Quality Gate') {
            steps {
                script {
                    timeout(time: 1, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }
        
        stage('Build and tag image using Docker') {
            steps {
                dir('/opt/jenkins/workspace') {
                    script {
                        sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                        sh "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
                    }
                }
            }
        }
        
        stage('Image scan using Trivy') {
            steps {
                script {
                    sh "trivy image --exit-code 1 --severity HIGH ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }
        
        stage('Push to AWS ECR') {
            steps {
                script {
                    // Login to AWS ECR
                    sh "aws ecr get-login-password --region your-region | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}"
                    // Push the image
                    sh "docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
