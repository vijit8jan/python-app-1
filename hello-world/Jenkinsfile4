
pipeline {
    agent any

    environment {
        // Define any environment variables needed for the pipeline
        SONARQUBE_SERVER = "http://192.168.1.7:9000"
        AWS_CREDENTIALS = credentials('aws-credentials-id') // Replace with your AWS credentials ID
        DOCKER_REGISTRY = "992382568751.dkr.ecr.us-east-1.amazonaws.com"
        IMAGE_NAME = "hello-world"
        IMAGE_TAG = "latest"
        YOUR_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        YOUR_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        YOUR_DEFAULT_REGION = 'us-east-1'
          
        
    }

    tools {
        // Specify the JDK tool to use
        jdk 'jdk-17'
    }
    stages {

        stage('Checkout') {
            steps {
                dir('/var/lib/jenkins/workspace') {
                    checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'https://github.com/vijit8jan/python-app-1.git']]])
                }
            }
        }
        

        stage('Unit testing') {
            steps {
                dir('/var/lib/jenkins/workspace') {
                    script {
                        sh 'docker --version'
                        sh 'docker pull python:3.9'
                        sh 'python3 -m venv /var/lib/jenkins/workspace/myenv'
                        sh 'mkdir -p /var/lib/jenkins/workspace/reports'
                        sh '''
                        # Activate virtual environment by directly calling the interpreter and pip from the venv
                        /var/lib/jenkins/workspace/myenv/bin/python -m pip install --upgrade pip
                        /var/lib/jenkins/workspace/myenv/bin/python -m pip install -r hello-world/requirements.txt
                        /var/lib/jenkins/workspace/myenv/bin/python -m pytest /var/lib/jenkins/workspace/hello-world/tests/test_main.py
                        '''

                    }
                }
            }
        }
        
        stage('Code coverage') {
            steps {
                dir('/var/lib/jenkins/workspace') {
                    script {
                        sh 'python3 -m venv /var/lib/jenkins/workspace/myenv'
                        sh '/var/lib/jenkins/workspace/myenv/bin/python -m pip install coverage'
                        sh '/var/lib/jenkins/workspace/myenv/bin/coverage  run -m pytest /var/lib/jenkins/workspace/hello-world/tests/test_main.py'
                        sh '/var/lib/jenkins/workspace/myenv/bin/coverage report'
                        sh '/var/lib/jenkins/workspace/myenv/bin/coverage xml -o coverage.xml'
                        cobertura coberturaReportFile: 'coverage.xml'
                    }
                }
            }
              
        }
        
       stage('SCA and SonarQube') {
            steps {
                withSonarQubeEnv('SonarQubeServer') {
                    script {
                        def scannerHome = tool 'SonarQubeScanner'
                        if (scannerHome) {
                            sh "${scannerHome}/bin/sonar-scanner \
                              -Dsonar.projectKey=hello-world \
                                -Dsonar.sources=hello-world \
                                -Dsonar.host.url=http://192.168.1.7:9000 \
                                 -Dsonar.login=squ_e692c2b4cbfd870757e314bd25a8c29b57c5978e"
                        } else {
                            error "SonarQube Scanner not configured."
                        }
                    }
                }
            }
        }
        
        stage('Build and tag image using Docker') {
            steps {
                dir('/var/lib/jenkins/workspace/jenkins-python-demo/hello-world') {
                    script {
                        sh "docker build -t hello-world ."
                        sh "docker tag hello-world:latest 992382568751.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest"
                    }
                }
            }
        }
        
        //stage('Image scan using Trivy') {
          //  steps {
            //    script {
              //      sh "trivy image 992382568751.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest"
                //}
            //}
        //}

        stage('configure aws'){
            steps {
               sh "aws configure set aws_access_key_id YOUR_ACCESS_KEY_ID \
                       && aws configure set aws_secret_access_key YOUR_SECRET_ACCESS_KEY \
                       && aws configure set region YOUR_DEFAULT_REGION"
                 }
             }
        stage('Push to AWS ECR') {
            steps {
                script {
                    // Login to AWS ECR
                    sh "aws ecr get-login-password --region your-region | docker login --username AWS --password-stdin 992382568751.dkr.ecr.us-east-1.amazonaws.com"
                    // Push the image
                    sh "docker push 992382568751.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest"
                }
            }
        }
    }

    
}
